% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/betanmf.R
\name{betanmf}
\alias{betanmf}
\title{Multiplicative update rules for non-negative matrix factorization}
\usage{
betanmf(X, F, L, numiter = 1000, e = 1e-15)
}
\arguments{
\item{X}{The n x m matrix of counts. All entries of X should be
non-negative.}

\item{F}{This is the initial estimate of the factors (also called
"basis vectors"). It should be an m x k matrix, where m is the
number of columns of X, and k is the rank of the matrix
factorization. All entries of F should be non-negative.}

\item{L}{This is the initial estimate of the loadings (also called
"activations"). It should an n x k matrix, where}

\item{numiter}{The number of multiplicative updates to run. It
should an n x k matrix, where n is the number of rows of X, and k
is the rank of the matrix factorization. All entries of L should be
non-negative.}

\item{e}{Describe e here.}
}
\description{
This function decomposes the input counts matrix X =
  L*F' by nonnegative matrix factorization (NMF) based on the
  "divergence" criterion; equivalently, it optimizes the likelihood
  under a Poisson model of the data, X. It runs a specified number of
  multiplicative updates to fit the L and F matrices. Note that the
  multiplicative updates can also be derived---and hence
  interpreted---as an EM algorithm.
}
\details{
This function is mainly for internal use, and should only
  be called directly if you really know what you are doing. In
  particular, only minimal argument checking is performed; if you are
  not careful, you will get poor results are errors that are
  difficult to interpret.

  This implementation is adapted from the MATLAB code by Daichi
  Kitamura \url{http://d-kitamura.net}.
}
\references{
Lee, D. D. and Seung, H. S. (2001). Algorithms for
  non-negative matrix factorization. In Advances in Neural
  Information Processing Systems \bold{13}, 556â€“562.
}
\seealso{
fit_topics
}
\keyword{internal}
